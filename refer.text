import PropTypes from "prop-types";

const Step1 = ({ register, errors, email }) => (
    <div className="flex flex-col justify-center">
        <h2 className="text-xl font-extrabold">Create account</h2>
        <p>Please enter your email address for verification</p>
        <div className="flex flex-col gap-5 mt-8">

            {/* EMAIL INPUT */}
            <div className = "flex flex-col gap-2">

                <label
                    htmlFor = "email"
                    className = "block text-sm font-medium text-gray-700"
                >
                    Email Address
                </label>
                <input
                    className = "border p-2"
                    id = "email"
                    placeholder = "helloworld@gmail.com"
                    defaultValue = { email } 
                    {...register("email", {
                        required: "Email is required",
                        pattern: {
                            value: /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$/,
                            message: "Invalid email format",
                        },
                    })}
                />

                <p className = "error">{errors.email?.message}</p>
                
            </div>

            {/* USERNAME INPUT */}
            <div className = "flex flex-col gap-2">
                <label
                    htmlFor = "username"
                    className = "block text-sm font-medium text-gray-700"
                >
                    Username
                </label>
                <input
                    className = "border p-2"
                    type = "text"
                    id = "username"
                    placeholder = "Enter your RallyRank username"
                    {...register("username", {
                        required: "A username is required.",
                        minLength: {
                            value: 5, 
                            message: "Username must be at least 5 characters long",
                        },
                        maxLength: {
                            value: 20,
                            message: "Username cannot exceed 20 characters.",
                        },
                        pattern: {
                            value: /^[a-zA-Z0-9_]*$/,
                            message: "Username can only contain letters, numbers and underscores.",
                        },
                    })}
                />
                <p className = "error"> {errors.username?.message} </p>
            </div>
        </div>
    </div>
);

Step1.propTypes = {
    register: PropTypes.func.isRequired,
    errors: PropTypes.shape({
        email: PropTypes.object,
        username: PropTypes.object,
    }).isRequired,
    email: PropTypes.string.isRequired,
};

export default Step1;



import PropTypes from "prop-types";

const Step2 = ({ register, errors }) => (
  <div className="flex flex-col justify-center">
    <h2 className="text-xl font-extrabold">Personal Information</h2>
    <p>We love to know more about you!</p>
    <div className="flex flex-col gap-5 mt-8 justify-center">
      <div className="flex gap-5 justify-center">
        <div className="flex flex-col gap-1 w-1/2">
          <label
            htmlFor="firstName"
            className="block text-sm font-medium text-gray-700"
          >
            First Name
          </label>
          <input
            className="border p-2"
            type="text"
            id="firstName"
            placeholder="First Name"
            {...register("firstName", {
              required: "First name is required",
            })}
          />
          <p className="error">{errors.firstName?.message}</p>
        </div>
        <div className="flex flex-col gap-1 w-1/2">
          <label
            htmlFor="lastName"
            className="block text-sm font-medium text-gray-700"
          >
            Last Name
          </label>
          <input
            className="border p-2"
            type="text"
            id="lastName"
            placeholder="Last Name"
            {...register("lastName", {
              required: "Last name is required",
            })}
          />
          <p className="error">{errors.lastName?.message}</p>
        </div>
      </div>

      <div className="flex flex-col gap-1">
        <label
          htmlFor="gender"
          className="block text-sm font-medium text-gray-700"
        >
          Gender
        </label>
        <select
          className="border p-2"
          id="gender"
          {...register("gender", {
            required: "Gender is required",
          })}
        >
          <option value="">Select Gender</option>
          <option value="Male">Male</option>
          <option value="Female">Female</option>
        </select>

        <p className="error">{errors.gender?.message}</p>
      </div>
      <div className="flex flex-col gap-1">
        <label
          htmlFor="dob"
          className="block text-sm font-medium text-gray-700"
        >
          Date of Birth
        </label>
        <input
          className="border p-2"
          type="date"
          id="dob"
          {...register("dob", {
            required: "Date of birth is required",
          })}
        />
        <p className="error">{errors.dob?.message}</p>
      </div>
      <div className="flex flex-col gap-1">
        <label
          htmlFor="phone"
          className="block text-sm font-medium text-gray-700"
        >
          Phone Number
        </label>
        <input
          className="border p-2"
          type="tel"
          id="phone"
          placeholder="Phone Number"
          {...register("phone", {
            required: "Phone number is required",
            pattern: {
              value: /^(?:6\d{7}|[89]\d{7}|1800\d{7}|1900\d{7})$/,
              message: "Please enter a valid phone number",
            }
          })}
        />
        <p className="error">{errors.phone?.message}</p>
      </div>
    </div>
  </div>
);

Step2.propTypes = {
  register: PropTypes.func.isRequired,
  errors: PropTypes.shape({
    firstName: PropTypes.object,
    lastName: PropTypes.object,
    gender: PropTypes.object,
    dob: PropTypes.object,
    phone: PropTypes.object,
  }).isRequired,
};

export default Step2;


import PropTypes from "prop-types";
import { useState } from "react";

const Step3 = ({ register, errors, watch }) => {

    const password = watch("password");
    const [showPassword, setShowPassword] = useState(false);
    const [showConfirmPassword, setConfirmShowPassword] = useState(false);

    return (
        <div>
            <h2 className = "text-xl font-extrabold"> Account Setup </h2>
            <p> Last stage of your account registration! Please enter a username and password. </p>
            <div className = "flex flex-col gap-5 mt-8">

                {/* PASSWORD */}
                <div className = "flex flex-col gap-2">
                    <label
                        htmlFor = "password"
                        className = "block text-sm font-medium text-gray-700"
                    >
                        Password
                    </label>
                    <input
                        className = "border p-2"
                        type = {showPassword ? "text" : "password"}
                        id = "password"
                        placeholder = "Enter your password"
                        {...register("password", {
                            required: "A password is required.",
                            minLength: {
                                value: 8,
                                message: "Password must be at least 8 characters long.",
                            },
                            // validate: {
                            //     alphanumeric: value => /^(?=.*[a-zA-Z])(?=.*[0-9])/.test(value) || "Password must be alphanumeric.",
                            //     uppercase: value => /(?=.*[A-Z])/.test(value) || "Password must contain at least one uppercase letter.",
                            //     lowercase: value => /(?=.*[a-z])/.test(value) || "Password must contain at least one lowercase letter.",
                            //     symbol: value => /(?=.*[!@#$%^&*(),.?":{}|<>])/.test(value) || "Password must contain at least one special character.",
                            // },
                        })}
                    />
                    <p className = "error"> {errors.password?.message} </p>
                    <div className = "block text-sm font-normal text-gray-700 pl-3">
                        <input
                        type = "checkbox"
                        id = "showPassword"
                        checked = {showPassword}
                        onChange = {() => setShowPassword(!showPassword)}
                        />
                        <label 
                            htmlFor = "showPassword"> Show Password 
                        </label>
                    </div>
                </div>

                {/* CONFIRM PASSWORD */}
                <div className = "flex flex-col gap-2">
                    <label
                        htmlFor = "confirmPassword"
                        className = "block text-sm font-medium text-gray-700"
                    >
                        Confirm Password
                    </label>
                    <input
                        className = "border p-2"
                        type = {showConfirmPassword ? "text" : "password"}
                        id = "confirmPassword"
                        placeholder = "Re-enter your password"
                        {...register("confirmPassword", {
                            required: "Confirm password is required",
                            validate: (value) =>
                                value === password || "Passwords do not match!",
                        })}
                    />
                    <p className = "error"> {errors.confirmPassword?.message} </p>
                <div className = "block text-sm font-normal text-gray-700 pl-3">
                        <input
                        type = "checkbox"
                        id = "showConfirmPassword"
                        checked = {showConfirmPassword}
                        onChange = {() => setConfirmShowPassword(!showConfirmPassword)}
                        />
                        <label 
                            htmlFor = "showConfirmPassword"> Show Password 
                        </label>
                    </div>
                </div>
            </div>
        </div>
    );
};

Step3.propTypes = {
    register: PropTypes.func.isRequired,
    errors: PropTypes.shape({
        username: PropTypes.object,
        password: PropTypes.object,
        confirmPassword: PropTypes.object,
    }).isRequired,
    watch: PropTypes.func.isRequired,
};

export default Step3;